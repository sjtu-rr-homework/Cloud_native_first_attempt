{"remainingRequest":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\src\\components\\Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\src\\components\\Board.vue","mtime":1561175128156},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561116036365},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1561116159625},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1561116030101},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561116036365},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1561116163773}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Board',\n  created: function () {\n    this.resetBoard();\n  },\n  data: function () {\n    return {\n      width: 2,\n      // 24\n      height: 2,\n      // 12\n      maxWidth: 36,\n      maxHeight: 18,\n      stepAmount: 3,\n      refreshing: false,\n      board: [[]],\n      // 0 = dead, 1 = alive\n      initBoard: [[]],\n      simulationStepInterval: 500,\n      generation: 0,\n      simulationFail: false,\n      simulationReady: false,\n      simulationPlaying: false,\n      simulation: [[[]]] // simulation[0] is the first step after the initial board\n\n    };\n  },\n  methods: {\n    switchAlive: function (i, j) {\n      this.board[i][j] = 1 - this.board[i][j];\n      this.refreshBoard();\n    },\n    refreshBoard: function () {\n      this.refreshing = true;\n      let tmp = this.board;\n      this.board = [];\n      this.board = tmp;\n      this.refreshing = false;\n    },\n    isInBorder: function (i, j) {\n      return i >= 0 && i < this.height && j >= 0 && j < this.width;\n    },\n    resetBoard: function () {\n      this.board = [];\n\n      for (let i = 0; i < this.maxHeight; i++) {\n        let row = [];\n\n        for (let j = 0; j < this.maxWidth; j++) {\n          row.push(0);\n        }\n\n        this.board.push(row);\n      }\n    },\n    getInitialBoard: function () {\n      let tmp = [];\n\n      for (let i = 0; i < this.height; i++) {\n        let row = [];\n\n        for (let j = 0; j < this.width; j++) {\n          row.push(this.board[i][j]);\n        }\n\n        tmp.push(row);\n      }\n\n      this.initBoard = tmp;\n      return tmp;\n    },\n    submitBoard: function () {\n      this.simulationFail = false;\n      this.simulationReady = false;\n      this.$http.post('/simulation/simulate', {\n        steps: this.stepAmount,\n        initialBoard: this.getInitialBoard()\n      }).then(resp => {\n        this.simulation = resp.data.simulation;\n        this.simulationReady = true;\n        this.simulationFail = false;\n      }, () => {\n        this.simulationReady = false;\n        this.simulationFail = true;\n      });\n      this.$http.post('/statistics/ChangeData', {\n        steps: this.stepAmount,\n        initialBoard: this.getInitialBoard()\n      }).then();\n      this.sleep(200).then(() => {\n        this.$http.post('/save/SaveResult', {\n          result: this.simulation\n        }).then();\n      });\n      /* this.getInitialBoard()\r\n      this.simulation = [[[0, 1], [1, 0]], [[0, 0], [0, 1]], [[1, 0], [1, 0]]]\r\n      this.simulationReady = true */\n    },\n    setBoard: function (trimmedBoard) {\n      for (let i = 0; i < this.height; i++) {\n        for (let j = 0; j < this.width; j++) {\n          this.board[i][j] = trimmedBoard[i][j];\n        }\n      }\n\n      this.refreshBoard();\n    },\n    sleep: function (time) {\n      return new Promise(resolve => setTimeout(resolve, time));\n    },\n    showSimulation: function () {\n      this.simulationPlaying = true;\n      this.setBoard(this.initBoard);\n      this.generation = 0;\n\n      for (let s = 0; s < this.simulation.length; s++) {\n        this.sleep((s + 1) * this.simulationStepInterval).then(() => {\n          this.setBoard(this.simulation[s]);\n          this.generation = s + 1;\n        });\n      }\n\n      this.sleep(this.simulation.length * this.simulationStepInterval).then(() => {\n        this.simulationPlaying = false;\n      });\n    },\n    finishSimulation: function () {\n      this.setBoard(this.initBoard);\n      this.simulationReady = false;\n      this.generation = 0;\n    }\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"p-2\">\r\n    <div class=\"p-2\">\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">模拟步数</span>\r\n        <input v-model=\"stepAmount\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"模拟步数\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">单位时间间隔（毫秒）</span>\r\n        <input v-model=\"simulationStepInterval\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"单位时间间隔（毫秒）\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">宽度（不超过36）</span>\r\n        <input v-model=\"width\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"宽度（不超过36）\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">高度（不超过18）</span>\r\n        <input v-model=\"height\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"高度（不超过18）\"/>\r\n      </div>\r\n      <button class=\"btn btn-block btn-outline-warning\" v-on:click=\"resetBoard()\">重置</button>\r\n      <button class=\"btn btn-block btn-outline-primary\" v-on:click=\"submitBoard()\">获取模拟结果</button>\r\n    </div>\r\n    <div class=\"p-2\">Tip1: 点击下面的小方格来改变方格的状态</div>\r\n    <div class=\"p-2\">Tip2: 点击上方的按钮获取模拟结果</div>\r\n    <div class=\"p-2\">Tip3: 点击最下方的按钮播放模拟结果</div>\r\n    <div v-for=\"(row, i) in board\" v-bind:key=\"i\" class=\"pb-1\">\r\n      <div v-if=\"i < height\">\r\n        <span v-for=\"(cell, j) in row\" v-bind:key=\"j\" class=\"pl-1\">\r\n          <img v-if=\"isInBorder(i, j) && cell === 0\" src=\"@/assets/dead.png\" width=\"32px\" height=\"32px\" v-on:click=\"switchAlive(i, j)\"/>\r\n          <img v-else-if=\"isInBorder(i, j) && cell === 1\" src=\"@/assets/alive.png\" width=\"32px\" height=\"32px\" v-on:click=\"switchAlive(i, j)\"/>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-2\">第 {{ generation }} 代</div>\r\n    <div class=\"p-2\">\r\n      <div v-if=\"simulationFail\" class=\"p-2\">获取模拟结果失败</div>\r\n      <button v-bind:disabled=\"!simulationReady || simulationPlaying\" class=\"btn btn-block btn-outline-success\" v-on:click=\"showSimulation()\">播放！</button>\r\n      <button v-bind:disabled=\"!simulationReady || simulationPlaying\" class=\"btn btn-block btn-outline-warning\" v-on:click=\"finishSimulation()\">结束模拟</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Board',\r\n  created: function () {\r\n    this.resetBoard()\r\n  },\r\n  data: function () {\r\n    return {\r\n      width: 2, // 24\r\n      height: 2, // 12\r\n      maxWidth: 36,\r\n      maxHeight: 18,\r\n      stepAmount: 3,\r\n      refreshing: false,\r\n      board: [[]], // 0 = dead, 1 = alive\r\n      initBoard: [[]],\r\n      simulationStepInterval: 500,\r\n      generation: 0,\r\n      simulationFail: false,\r\n      simulationReady: false,\r\n      simulationPlaying: false,\r\n      simulation: [[[]]] // simulation[0] is the first step after the initial board\r\n    }\r\n  },\r\n  methods: {\r\n    switchAlive: function (i, j) {\r\n      this.board[i][j] = 1 - this.board[i][j]\r\n      this.refreshBoard()\r\n    },\r\n    refreshBoard: function () {\r\n      this.refreshing = true\r\n      let tmp = this.board\r\n      this.board = []\r\n      this.board = tmp\r\n      this.refreshing = false\r\n    },\r\n    isInBorder: function (i, j) {\r\n      return i >= 0 && i < this.height && j >= 0 && j < this.width\r\n    },\r\n    resetBoard: function () {\r\n      this.board = []\r\n      for (let i = 0; i < this.maxHeight; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.maxWidth; j++) {\r\n          row.push(0)\r\n        }\r\n        this.board.push(row)\r\n      }\r\n    },\r\n    getInitialBoard: function () {\r\n      let tmp = []\r\n      for (let i = 0; i < this.height; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.width; j++) {\r\n          row.push(this.board[i][j])\r\n        }\r\n        tmp.push(row)\r\n      }\r\n      this.initBoard = tmp\r\n      return tmp\r\n    },\r\n    submitBoard: function () {\r\n      this.simulationFail = false\r\n      this.simulationReady = false\r\n      this.$http.post(\r\n        '/simulation/simulate', {\r\n          steps: this.stepAmount,\r\n          initialBoard: this.getInitialBoard()\r\n        }\r\n      ).then(\r\n        (resp) => {\r\n          this.simulation = resp.data.simulation\r\n          this.simulationReady = true\r\n          this.simulationFail = false\r\n        }, () => {\r\n          this.simulationReady = false\r\n          this.simulationFail = true\r\n        }\r\n      )\r\n\r\n      this.$http.post('/statistics/ChangeData', {\r\n        steps: this.stepAmount,\r\n        initialBoard: this.getInitialBoard()\r\n      }\r\n      ).then(\r\n\r\n      )\r\n\r\n      this.sleep(200).then(\r\n        () => {\r\n          this.$http.post('/save/SaveResult', {\r\n            result: this.simulation\r\n          }\r\n          ).then(\r\n\r\n          )\r\n        }\r\n      )\r\n      /* this.getInitialBoard()\r\n      this.simulation = [[[0, 1], [1, 0]], [[0, 0], [0, 1]], [[1, 0], [1, 0]]]\r\n      this.simulationReady = true */\r\n    },\r\n    setBoard: function (trimmedBoard) {\r\n      for (let i = 0; i < this.height; i++) {\r\n        for (let j = 0; j < this.width; j++) {\r\n          this.board[i][j] = trimmedBoard[i][j]\r\n        }\r\n      }\r\n      this.refreshBoard()\r\n    },\r\n    sleep: function (time) {\r\n      return new Promise((resolve) => setTimeout(resolve, time))\r\n    },\r\n    showSimulation: function () {\r\n      this.simulationPlaying = true\r\n      this.setBoard(this.initBoard)\r\n      this.generation = 0\r\n      for (let s = 0; s < this.simulation.length; s++) {\r\n        this.sleep((s + 1) * this.simulationStepInterval).then(\r\n          () => {\r\n            this.setBoard(this.simulation[s])\r\n            this.generation = s + 1\r\n          }\r\n        )\r\n      }\r\n      this.sleep(this.simulation.length * this.simulationStepInterval).then(\r\n        () => {\r\n          this.simulationPlaying = false\r\n        }\r\n      )\r\n    },\r\n    finishSimulation: function () {\r\n      this.setBoard(this.initBoard)\r\n      this.simulationReady = false\r\n      this.generation = 0\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"sourceRoot":"src/components"}]}