{"remainingRequest":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\src\\components\\Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\src\\components\\Board.vue","mtime":1560685131527},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Users\\mygit\\Cloud_native_first_attempt\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'Board',\r\n  created: function () {\r\n    this.resetBoard()\r\n  },\r\n  data: function () {\r\n    return {\r\n      width: 2, // 24\r\n      height: 2, // 12\r\n      maxWidth: 36,\r\n      maxHeight: 18,\r\n      stepAmount: 3,\r\n      refreshing: false,\r\n      board: [[]], // 0 = dead, 1 = alive\r\n      initBoard: [[]],\r\n      simulationStepInterval: 500,\r\n      generation: 0,\r\n      simulationFail: false,\r\n      simulationReady: false,\r\n      simulationPlaying: false,\r\n      simulation: [[[]]] // simulation[0] is the first step after the initial board\r\n    }\r\n  },\r\n  methods: {\r\n    switchAlive: function (i, j) {\r\n      this.board[i][j] = 1 - this.board[i][j]\r\n      this.refreshBoard()\r\n    },\r\n    refreshBoard: function () {\r\n      this.refreshing = true\r\n      let tmp = this.board\r\n      this.board = []\r\n      this.board = tmp\r\n      this.refreshing = false\r\n    },\r\n    isInBorder: function (i, j) {\r\n      return i >= 0 && i < this.height && j >= 0 && j < this.width\r\n    },\r\n    resetBoard: function () {\r\n      this.board = []\r\n      for (let i = 0; i < this.maxHeight; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.maxWidth; j++) {\r\n          row.push(0)\r\n        }\r\n        this.board.push(row)\r\n      }\r\n    },\r\n    getInitialBoard: function () {\r\n      let tmp = []\r\n      for (let i = 0; i < this.height; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.width; j++) {\r\n          row.push(this.board[i][j])\r\n        }\r\n        tmp.push(row)\r\n      }\r\n      this.initBoard = tmp\r\n      return tmp\r\n    },\r\n    submitBoard: function () {\r\n      this.simulationFail = false\r\n      this.simulationReady = false\r\n      this.$http.post(\r\n        '/simulation/simulate', {\r\n          steps: this.stepAmount,\r\n          initialBoard: this.getInitialBoard()\r\n        }\r\n      ).then(\r\n        (resp) => {\r\n          this.simulation = resp.data.simulation\r\n          this.simulationReady = true\r\n          this.simulationFail = false\r\n        }, () => {\r\n          this.simulationReady = false\r\n          this.simulationFail = true\r\n        }\r\n      )\r\n      this.$http.post('/save/SaveResult', {\r\n        result: this.simulation\r\n      }\r\n      ).then(\r\n\r\n      )\r\n      /* this.getInitialBoard()\r\n      this.simulation = [[[0, 1], [1, 0]], [[0, 0], [0, 1]], [[1, 0], [1, 0]]]\r\n      this.simulationReady = true */\r\n    },\r\n    setBoard: function (trimmedBoard) {\r\n      for (let i = 0; i < this.height; i++) {\r\n        for (let j = 0; j < this.width; j++) {\r\n          this.board[i][j] = trimmedBoard[i][j]\r\n        }\r\n      }\r\n      this.refreshBoard()\r\n    },\r\n    sleep: function (time) {\r\n      return new Promise((resolve) => setTimeout(resolve, time))\r\n    },\r\n    showSimulation: function () {\r\n      this.simulationPlaying = true\r\n      this.setBoard(this.initBoard)\r\n      this.generation = 0\r\n      for (let s = 0; s < this.simulation.length; s++) {\r\n        this.sleep((s + 1) * this.simulationStepInterval).then(\r\n          () => {\r\n            this.setBoard(this.simulation[s])\r\n            this.generation = s + 1\r\n          }\r\n        )\r\n      }\r\n      this.sleep(this.simulation.length * this.simulationStepInterval).then(\r\n        () => {\r\n          this.simulationPlaying = false\r\n        }\r\n      )\r\n    },\r\n    finishSimulation: function () {\r\n      this.setBoard(this.initBoard)\r\n      this.simulationReady = false\r\n      this.generation = 0\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"p-2\">\r\n    <div class=\"p-2\">\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">模拟步数</span>\r\n        <input v-model=\"stepAmount\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"模拟步数\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">单位时间间隔（毫秒）</span>\r\n        <input v-model=\"simulationStepInterval\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"单位时间间隔（毫秒）\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">宽度（不超过36）</span>\r\n        <input v-model=\"width\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"宽度（不超过36）\"/>\r\n      </div>\r\n      <div class=\"input-group p-2 col-5\">\r\n        <span class=\"input-group-prepend offset-1 col-2\">高度（不超过18）</span>\r\n        <input v-model=\"height\" type=\"number\" class=\"form-control offset-1 col-7\" placeholder=\"高度（不超过18）\"/>\r\n      </div>\r\n      <button class=\"btn btn-block btn-outline-warning\" v-on:click=\"resetBoard()\">重置</button>\r\n      <button class=\"btn btn-block btn-outline-primary\" v-on:click=\"submitBoard()\">获取模拟结果</button>\r\n    </div>\r\n    <div class=\"p-2\">Tip1: 点击下面的小方格来改变方格的状态</div>\r\n    <div class=\"p-2\">Tip2: 点击上方的按钮获取模拟结果</div>\r\n    <div class=\"p-2\">Tip3: 点击最下方的按钮播放模拟结果</div>\r\n    <div v-for=\"(row, i) in board\" v-bind:key=\"i\" class=\"pb-1\">\r\n      <div v-if=\"i < height\">\r\n        <span v-for=\"(cell, j) in row\" v-bind:key=\"j\" class=\"pl-1\">\r\n          <img v-if=\"isInBorder(i, j) && cell === 0\" src=\"@/assets/dead.png\" width=\"32px\" height=\"32px\" v-on:click=\"switchAlive(i, j)\"/>\r\n          <img v-else-if=\"isInBorder(i, j) && cell === 1\" src=\"@/assets/alive.png\" width=\"32px\" height=\"32px\" v-on:click=\"switchAlive(i, j)\"/>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"p-2\">第 {{ generation }} 代</div>\r\n    <div class=\"p-2\">\r\n      <div v-if=\"simulationFail\" class=\"p-2\">获取模拟结果失败</div>\r\n      <button v-bind:disabled=\"!simulationReady || simulationPlaying\" class=\"btn btn-block btn-outline-success\" v-on:click=\"showSimulation()\">播放！</button>\r\n      <button v-bind:disabled=\"!simulationReady || simulationPlaying\" class=\"btn btn-block btn-outline-warning\" v-on:click=\"finishSimulation()\">结束模拟</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Board',\r\n  created: function () {\r\n    this.resetBoard()\r\n  },\r\n  data: function () {\r\n    return {\r\n      width: 2, // 24\r\n      height: 2, // 12\r\n      maxWidth: 36,\r\n      maxHeight: 18,\r\n      stepAmount: 3,\r\n      refreshing: false,\r\n      board: [[]], // 0 = dead, 1 = alive\r\n      initBoard: [[]],\r\n      simulationStepInterval: 500,\r\n      generation: 0,\r\n      simulationFail: false,\r\n      simulationReady: false,\r\n      simulationPlaying: false,\r\n      simulation: [[[]]] // simulation[0] is the first step after the initial board\r\n    }\r\n  },\r\n  methods: {\r\n    switchAlive: function (i, j) {\r\n      this.board[i][j] = 1 - this.board[i][j]\r\n      this.refreshBoard()\r\n    },\r\n    refreshBoard: function () {\r\n      this.refreshing = true\r\n      let tmp = this.board\r\n      this.board = []\r\n      this.board = tmp\r\n      this.refreshing = false\r\n    },\r\n    isInBorder: function (i, j) {\r\n      return i >= 0 && i < this.height && j >= 0 && j < this.width\r\n    },\r\n    resetBoard: function () {\r\n      this.board = []\r\n      for (let i = 0; i < this.maxHeight; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.maxWidth; j++) {\r\n          row.push(0)\r\n        }\r\n        this.board.push(row)\r\n      }\r\n    },\r\n    getInitialBoard: function () {\r\n      let tmp = []\r\n      for (let i = 0; i < this.height; i++) {\r\n        let row = []\r\n        for (let j = 0; j < this.width; j++) {\r\n          row.push(this.board[i][j])\r\n        }\r\n        tmp.push(row)\r\n      }\r\n      this.initBoard = tmp\r\n      return tmp\r\n    },\r\n    submitBoard: function () {\r\n      this.simulationFail = false\r\n      this.simulationReady = false\r\n      this.$http.post(\r\n        '/simulation/simulate', {\r\n          steps: this.stepAmount,\r\n          initialBoard: this.getInitialBoard()\r\n        }\r\n      ).then(\r\n        (resp) => {\r\n          this.simulation = resp.data.simulation\r\n          this.simulationReady = true\r\n          this.simulationFail = false\r\n        }, () => {\r\n          this.simulationReady = false\r\n          this.simulationFail = true\r\n        }\r\n      )\r\n      this.$http.post('/save/SaveResult', {\r\n        result: this.simulation\r\n      }\r\n      ).then(\r\n\r\n      )\r\n      /* this.getInitialBoard()\r\n      this.simulation = [[[0, 1], [1, 0]], [[0, 0], [0, 1]], [[1, 0], [1, 0]]]\r\n      this.simulationReady = true */\r\n    },\r\n    setBoard: function (trimmedBoard) {\r\n      for (let i = 0; i < this.height; i++) {\r\n        for (let j = 0; j < this.width; j++) {\r\n          this.board[i][j] = trimmedBoard[i][j]\r\n        }\r\n      }\r\n      this.refreshBoard()\r\n    },\r\n    sleep: function (time) {\r\n      return new Promise((resolve) => setTimeout(resolve, time))\r\n    },\r\n    showSimulation: function () {\r\n      this.simulationPlaying = true\r\n      this.setBoard(this.initBoard)\r\n      this.generation = 0\r\n      for (let s = 0; s < this.simulation.length; s++) {\r\n        this.sleep((s + 1) * this.simulationStepInterval).then(\r\n          () => {\r\n            this.setBoard(this.simulation[s])\r\n            this.generation = s + 1\r\n          }\r\n        )\r\n      }\r\n      this.sleep(this.simulation.length * this.simulationStepInterval).then(\r\n        () => {\r\n          this.simulationPlaying = false\r\n        }\r\n      )\r\n    },\r\n    finishSimulation: function () {\r\n      this.setBoard(this.initBoard)\r\n      this.simulationReady = false\r\n      this.generation = 0\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}